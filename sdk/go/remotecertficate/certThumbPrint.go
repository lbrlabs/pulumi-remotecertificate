// Code generated by pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package remotecertficate

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CertThumbPrint struct {
	pulumi.CustomResourceState

	Hash   pulumi.StringOutput `pulumi:"hash"`
	Port   pulumi.IntOutput    `pulumi:"port"`
	Server pulumi.StringOutput `pulumi:"server"`
}

// NewCertThumbPrint registers a new resource with the given unique name, arguments, and options.
func NewCertThumbPrint(ctx *pulumi.Context,
	name string, args *CertThumbPrintArgs, opts ...pulumi.ResourceOption) (*CertThumbPrint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	if args.Server == nil {
		return nil, errors.New("invalid value for required argument 'Server'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource CertThumbPrint
	err := ctx.RegisterResource("remotecertificate:index:CertThumbPrint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCertThumbPrint gets an existing CertThumbPrint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCertThumbPrint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CertThumbPrintState, opts ...pulumi.ResourceOption) (*CertThumbPrint, error) {
	var resource CertThumbPrint
	err := ctx.ReadResource("remotecertificate:index:CertThumbPrint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CertThumbPrint resources.
type certThumbPrintState struct {
}

type CertThumbPrintState struct {
}

func (CertThumbPrintState) ElementType() reflect.Type {
	return reflect.TypeOf((*certThumbPrintState)(nil)).Elem()
}

type certThumbPrintArgs struct {
	Port   int    `pulumi:"port"`
	Server string `pulumi:"server"`
}

// The set of arguments for constructing a CertThumbPrint resource.
type CertThumbPrintArgs struct {
	Port   pulumi.IntInput
	Server pulumi.StringInput
}

func (CertThumbPrintArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*certThumbPrintArgs)(nil)).Elem()
}

type CertThumbPrintInput interface {
	pulumi.Input

	ToCertThumbPrintOutput() CertThumbPrintOutput
	ToCertThumbPrintOutputWithContext(ctx context.Context) CertThumbPrintOutput
}

func (*CertThumbPrint) ElementType() reflect.Type {
	return reflect.TypeOf((**CertThumbPrint)(nil)).Elem()
}

func (i *CertThumbPrint) ToCertThumbPrintOutput() CertThumbPrintOutput {
	return i.ToCertThumbPrintOutputWithContext(context.Background())
}

func (i *CertThumbPrint) ToCertThumbPrintOutputWithContext(ctx context.Context) CertThumbPrintOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertThumbPrintOutput)
}

// CertThumbPrintArrayInput is an input type that accepts CertThumbPrintArray and CertThumbPrintArrayOutput values.
// You can construct a concrete instance of `CertThumbPrintArrayInput` via:
//
//	CertThumbPrintArray{ CertThumbPrintArgs{...} }
type CertThumbPrintArrayInput interface {
	pulumi.Input

	ToCertThumbPrintArrayOutput() CertThumbPrintArrayOutput
	ToCertThumbPrintArrayOutputWithContext(context.Context) CertThumbPrintArrayOutput
}

type CertThumbPrintArray []CertThumbPrintInput

func (CertThumbPrintArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertThumbPrint)(nil)).Elem()
}

func (i CertThumbPrintArray) ToCertThumbPrintArrayOutput() CertThumbPrintArrayOutput {
	return i.ToCertThumbPrintArrayOutputWithContext(context.Background())
}

func (i CertThumbPrintArray) ToCertThumbPrintArrayOutputWithContext(ctx context.Context) CertThumbPrintArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertThumbPrintArrayOutput)
}

// CertThumbPrintMapInput is an input type that accepts CertThumbPrintMap and CertThumbPrintMapOutput values.
// You can construct a concrete instance of `CertThumbPrintMapInput` via:
//
//	CertThumbPrintMap{ "key": CertThumbPrintArgs{...} }
type CertThumbPrintMapInput interface {
	pulumi.Input

	ToCertThumbPrintMapOutput() CertThumbPrintMapOutput
	ToCertThumbPrintMapOutputWithContext(context.Context) CertThumbPrintMapOutput
}

type CertThumbPrintMap map[string]CertThumbPrintInput

func (CertThumbPrintMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertThumbPrint)(nil)).Elem()
}

func (i CertThumbPrintMap) ToCertThumbPrintMapOutput() CertThumbPrintMapOutput {
	return i.ToCertThumbPrintMapOutputWithContext(context.Background())
}

func (i CertThumbPrintMap) ToCertThumbPrintMapOutputWithContext(ctx context.Context) CertThumbPrintMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CertThumbPrintMapOutput)
}

type CertThumbPrintOutput struct{ *pulumi.OutputState }

func (CertThumbPrintOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CertThumbPrint)(nil)).Elem()
}

func (o CertThumbPrintOutput) ToCertThumbPrintOutput() CertThumbPrintOutput {
	return o
}

func (o CertThumbPrintOutput) ToCertThumbPrintOutputWithContext(ctx context.Context) CertThumbPrintOutput {
	return o
}

func (o CertThumbPrintOutput) Hash() pulumi.StringOutput {
	return o.ApplyT(func(v *CertThumbPrint) pulumi.StringOutput { return v.Hash }).(pulumi.StringOutput)
}

func (o CertThumbPrintOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v *CertThumbPrint) pulumi.IntOutput { return v.Port }).(pulumi.IntOutput)
}

func (o CertThumbPrintOutput) Server() pulumi.StringOutput {
	return o.ApplyT(func(v *CertThumbPrint) pulumi.StringOutput { return v.Server }).(pulumi.StringOutput)
}

type CertThumbPrintArrayOutput struct{ *pulumi.OutputState }

func (CertThumbPrintArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CertThumbPrint)(nil)).Elem()
}

func (o CertThumbPrintArrayOutput) ToCertThumbPrintArrayOutput() CertThumbPrintArrayOutput {
	return o
}

func (o CertThumbPrintArrayOutput) ToCertThumbPrintArrayOutputWithContext(ctx context.Context) CertThumbPrintArrayOutput {
	return o
}

func (o CertThumbPrintArrayOutput) Index(i pulumi.IntInput) CertThumbPrintOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CertThumbPrint {
		return vs[0].([]*CertThumbPrint)[vs[1].(int)]
	}).(CertThumbPrintOutput)
}

type CertThumbPrintMapOutput struct{ *pulumi.OutputState }

func (CertThumbPrintMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CertThumbPrint)(nil)).Elem()
}

func (o CertThumbPrintMapOutput) ToCertThumbPrintMapOutput() CertThumbPrintMapOutput {
	return o
}

func (o CertThumbPrintMapOutput) ToCertThumbPrintMapOutputWithContext(ctx context.Context) CertThumbPrintMapOutput {
	return o
}

func (o CertThumbPrintMapOutput) MapIndex(k pulumi.StringInput) CertThumbPrintOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CertThumbPrint {
		return vs[0].(map[string]*CertThumbPrint)[vs[1].(string)]
	}).(CertThumbPrintOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CertThumbPrintInput)(nil)).Elem(), &CertThumbPrint{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertThumbPrintArrayInput)(nil)).Elem(), CertThumbPrintArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CertThumbPrintMapInput)(nil)).Elem(), CertThumbPrintMap{})
	pulumi.RegisterOutputType(CertThumbPrintOutput{})
	pulumi.RegisterOutputType(CertThumbPrintArrayOutput{})
	pulumi.RegisterOutputType(CertThumbPrintMapOutput{})
}
